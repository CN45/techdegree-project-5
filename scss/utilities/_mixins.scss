@mixin mq($break) {
	@if $break == "small" {
		@media (min-width: $brkpoint-sm) {
			@content;
		}
	} @else
	if $break == "medium" {
		@media (min-width: $brkpoint-md) {
			@content;
		}
	} @else
	if $break == "large" {
		@media (min-width: $brkpoint-lg) {
			@content;
		}
	} @else {
		@error "Sorry! No value could be retrieved for `#{$break}`. ";
	}
}
//Flex Box
@mixin flexy ($disp: flex, $dir: null, $wrap: null, $just: null) {
	display: $disp;
	flex-direction: $dir;
	flex-wrap: $wrap;
	justify-content: $just;
	@content;
}
// BEM selectors
@mixin e($element) {
	&__#{$element} {
		@content;
	}
}
@mixin m($modifier) {
	&--#{$modifier} {
		@content;
	}
}
// Generate modifier color classes
@mixin bg-colors($map) {
	@each $theme, $color in $map {
		&--#{$theme} {
			background-color: $color;
		}
	}
}
// Generating :before or :after pseudo-element shapes
@mixin p-el($el, $el-w: null, $el-h: null) {
	@if $el == "before" or $el == "after" {
		&:#{$el} {
			@extend %pseudos;
			width: $el-w;
			height: $el-h;
			@content;
		}
	} @else {
		@error "`#{$el}` is not a valid pseudo-element.";
	}
}
// Image replacement
@mixin img-replace($img, $w, $h, $disp: block) {
	background-image: url("#{$path--rel}/#{$img}");
	background-repeat: no-repeat;
	width: $w;
	height: $h;
	display: $disp;
}
// Adjacent sibling margins
@mixin doubly($margin: 1em) {
	& + & {
		margin-left: $margin;
		@content;
	}
}
@mixin form {
	.btn--default {
		min-height: 10px;
    padding-left: 10px;
    padding-right: 1px;
    padding-top: 10px;
    padding-bottom: 10px;
		margin-top: em(12px);
    margin-bottom: em(12px);
	}
}
